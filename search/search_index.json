{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TossPayments Python Server SDK","text":"<p>A comprehensive Python library for TossPayments API integration, designed to make server-side payment processing simple, secure, and intuitive.</p> <p>Third-party Library</p> <p>This is an unofficial SDK for TossPayments API. All features are implemented based on the official TossPayments API documentation (v1) and sample data provided in the official documentation.</p>"},{"location":"#overview","title":"Overview","text":"<p>The TossPayments Python Server SDK provides a complete interface for integrating TossPayments payment processing into your Python applications. It supports all major TossPayments features including payment confirmation, retrieval, cancellation, and webhook handling.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Secure Authentication - Automatic environment detection with secure API key handling</li> <li>Complete Payment Lifecycle - Support for payment confirmation, retrieval, and cancellation</li> <li>Webhook Support - Built-in webhook verification and event handling</li> <li>Robust HTTP Client - Automatic retry with exponential backoff</li> <li>Comprehensive Error Handling - Detailed exception types for different error scenarios</li> <li>Type Safety - Full type hints and dataclass models for better IDE support</li> <li>Test Environment Support - Seamless switching between test and live environments</li> </ul>"},{"location":"#supported-python-versions","title":"Supported Python Versions","text":"<ul> <li>Python 3.9+</li> </ul>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li><code>requests&gt;=2.28.0</code></li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install tosspayments-python-server-sdk\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from tosspayments_server_sdk import Client\n\n# Initialize client\nclient = Client(secret_key=\"test_sk_...\")\n\n# Confirm a payment\npayment = client.payments.confirm(\n    payment_key=\"payment_key_from_client\",\n    order_id=\"order_123\",\n    amount=15000\n)\n\nprint(f\"Payment Status: {payment.status.value}\")\nprint(f\"Amount: {payment.total_amount:,} KRW\")\n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<ul> <li>Getting Started - Installation and setup instructions</li> <li>API Reference - Complete API documentation</li> <li>Payment Processing - Payment operations and examples</li> <li>Webhook Integration - Webhook implementation guide</li> <li>Data Models - Payment data structures and types</li> </ul>"},{"location":"#api-endpoints-coverage","title":"API Endpoints Coverage","text":"Feature Status Description Payment Confirmation \u2705 Confirm payments from client-side Payment Retrieval \u2705 Retrieve payment by key or order ID Payment Cancellation \u2705 Full and partial payment cancellation Webhook Processing \u2705 Payment and cancellation event handling Virtual Account \u2705 Virtual account payment support Card Payment \u2705 Credit/debit card payment support Simple Payment \u2705 Mobile wallet and simple payment methods"},{"location":"#environment-support","title":"Environment Support","text":"<p>The SDK automatically detects your environment based on your API key:</p> <ul> <li>Test Environment - Keys starting with <code>test_sk_</code></li> <li>Live Environment - Keys starting with <code>live_sk_</code></li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>Official TossPayments Documentation: https://docs.tosspayments.com/reference</li> <li>GitHub Issues: Report bugs or request features</li> <li>API Reference: Complete method documentation with examples</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"api-reference/client/","title":"Client","text":"<p>The <code>Client</code> class is the main entry point for interacting with the TossPayments API.</p>"},{"location":"api-reference/client/#class-definition","title":"Class Definition","text":"<pre><code>class Client:\n    def __init__(\n        self,\n        secret_key: str,\n        api_version: str = \"v1\",\n        timeout: int = 30,\n        max_retries: int = 3,\n    )\n</code></pre>"},{"location":"api-reference/client/#constructor-parameters","title":"Constructor Parameters","text":"Parameter Type Default Description <code>secret_key</code> <code>str</code> Required TossPayments secret key (<code>test_sk_*</code> or <code>live_sk_*</code>) <code>api_version</code> <code>str</code> <code>\"v1\"</code> TossPayments API version <code>timeout</code> <code>int</code> <code>30</code> HTTP request timeout in seconds <code>max_retries</code> <code>int</code> <code>3</code> Maximum number of retry attempts for failed requests"},{"location":"api-reference/client/#properties","title":"Properties","text":""},{"location":"api-reference/client/#is_live_mode","title":"<code>is_live_mode</code>","text":"<pre><code>@property\ndef is_live_mode(self) -&gt; bool\n</code></pre> <p>Returns <code>True</code> if the client is configured for live (production) mode.</p> <p>Returns: <code>bool</code></p> <p>Example: <pre><code>client = Client(secret_key=\"live_sk_...\")\nprint(client.is_live_mode)  # True\n</code></pre></p>"},{"location":"api-reference/client/#is_test_mode","title":"<code>is_test_mode</code>","text":"<pre><code>@property\ndef is_test_mode(self) -&gt; bool\n</code></pre> <p>Returns <code>True</code> if the client is configured for test mode.</p> <p>Returns: <code>bool</code></p> <p>Example: <pre><code>client = Client(secret_key=\"test_sk_...\")\nprint(client.is_test_mode)  # True\n</code></pre></p>"},{"location":"api-reference/client/#resource-access","title":"Resource Access","text":""},{"location":"api-reference/client/#payments","title":"<code>payments</code>","text":"<pre><code>@property\ndef payments(self) -&gt; PaymentResource\n</code></pre> <p>Access to payment-related operations.</p> <p>Returns: <code>PaymentResource</code></p> <p>Example: <pre><code>client = Client(secret_key=\"test_sk_...\")\npayment = client.payments.retrieve(\"payment_key_here\")\n</code></pre></p>"},{"location":"api-reference/client/#webhooks","title":"<code>webhooks</code>","text":"<pre><code>@property\ndef webhooks(self) -&gt; WebhookResource\n</code></pre> <p>Access to webhook-related operations.</p> <p>Returns: <code>WebhookResource</code></p> <p>Example: <pre><code>client = Client(secret_key=\"test_sk_...\")\nwebhook_event = client.webhooks.verify_and_parse(request_body)\n</code></pre></p>"},{"location":"api-reference/client/#usage-examples","title":"Usage Examples","text":""},{"location":"api-reference/client/#basic-initialization","title":"Basic Initialization","text":"<pre><code>from tosspayments_server_sdk import Client\n\n# Test environment\nclient = Client(secret_key=\"test_sk_your_key_here\")\n\n# Live environment\nclient = Client(secret_key=\"live_sk_your_key_here\")\n</code></pre>"},{"location":"api-reference/client/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>from tosspayments_server_sdk import Client\n\nclient = Client(\n    secret_key=\"test_sk_your_key_here\",\n    api_version=\"v1\",\n    timeout=60,         # 60 second timeout\n    max_retries=5       # 5 retry attempts\n)\n</code></pre>"},{"location":"api-reference/client/#environment-detection","title":"Environment Detection","text":"<pre><code>client = Client(secret_key=\"test_sk_your_key_here\")\n\nif client.is_test_mode:\n    print(\"Running in test mode\")\n    # Use test payment methods\nelif client.is_live_mode:\n    print(\"Running in live mode\")\n    # Process real payments\n</code></pre>"},{"location":"api-reference/client/#using-environment-variables","title":"Using Environment Variables","text":"<pre><code>import os\nfrom tosspayments_server_sdk import Client\n\nclient = Client(secret_key=os.getenv(\"TOSS_SECRET_KEY\"))\n\n# Verify configuration\nprint(f\"Environment: {'Test' if client.is_test_mode else 'Live'}\")\nprint(f\"API URL: {client.config.api_url}\")\n</code></pre>"},{"location":"api-reference/client/#configuration-details","title":"Configuration Details","text":"<p>The client automatically configures internal components:</p>"},{"location":"api-reference/client/#http-client-settings","title":"HTTP Client Settings","text":"<ul> <li>Base URL: <code>https://api.tosspayments.com</code></li> <li>Authentication: Basic Auth with secret key</li> <li>Retry Policy: Exponential backoff for 5xx errors</li> <li>Timeout: Configurable (default: 30 seconds)</li> </ul>"},{"location":"api-reference/client/#retry-behavior","title":"Retry Behavior","text":"<p>The client automatically retries requests for the following HTTP status codes: - <code>500</code> - Internal Server Error - <code>502</code> - Bad Gateway - <code>503</code> - Service Unavailable - <code>504</code> - Gateway Timeout</p> <p>Retry delay follows exponential backoff with a factor of 0.5 seconds.</p>"},{"location":"api-reference/client/#error-handling","title":"Error Handling","text":"<p>The client may raise the following exceptions during initialization:</p> <pre><code>from tosspayments_server_sdk import Client, ValidationError\n\ntry:\n    client = Client(secret_key=\"invalid_key_format\")\nexcept ValidationError as e:\n    print(f\"Configuration error: {e}\")\n</code></pre>"},{"location":"api-reference/client/#common-validation-errors","title":"Common Validation Errors","text":"<ul> <li>Invalid secret key format: Key must start with <code>test_sk_</code> or <code>live_sk_</code></li> <li>Invalid timeout: Must be a positive integer</li> <li>Invalid max_retries: Must be a non-negative integer</li> </ul>"},{"location":"api-reference/client/#related-documentation","title":"Related Documentation","text":"<ul> <li>PaymentResource - Payment operations</li> <li>WebhookResource - Webhook handling</li> <li>Models - Data structures</li> <li>Getting Started - Quickstart guide</li> </ul>"},{"location":"api-reference/models/","title":"Models","text":"<p>This section documents all data models used by the TossPayments Python Server SDK.</p>"},{"location":"api-reference/models/#base-model","title":"Base Model","text":""},{"location":"api-reference/models/#basemodel","title":"<code>BaseModel</code>","text":"<p>Abstract base class for all SDK models.</p> <pre><code>class BaseModel(ABC):\n    @classmethod\n    @abstractmethod\n    def from_dict(cls: Type[T], data: Dict[str, Any]) -&gt; T\n\n    def to_dict(self) -&gt; Dict[str, Any]\n    def __repr__(self)\n</code></pre> <p>All models inherit from <code>BaseModel</code> and provide: - <code>from_dict()</code> - Create instance from API response data - <code>to_dict()</code> - Convert instance to dictionary - <code>__repr__()</code> - String representation for debugging</p>"},{"location":"api-reference/models/#payment-models","title":"Payment Models","text":""},{"location":"api-reference/models/#payment","title":"<code>Payment</code>","text":"<p>Main payment object containing all payment information.</p> <pre><code>@dataclass\nclass Payment(BaseModel):\n    # Mandatory Fields\n    version: str\n    payment_key: str\n    type: PaymentType\n    order_id: str\n    order_name: str\n    mid: str\n    currency: str\n    method: str\n    total_amount: int\n    balance_amount: int\n    status: PaymentStatus\n    requested_at: datetime\n\n    # Optional Fields\n    approved_at: Optional[datetime] = None\n    use_escrow: bool = False\n    last_transaction_key: Optional[str] = None\n    supplied_amount: int = 0\n    vat: int = 0\n    cultural_expense: bool = False\n    tax_free_amount: int = 0\n    tax_exemption_amount: int = 0\n    cancels: List[Cancellation] = field(default_factory=list)\n    is_partial_cancelable: bool = True\n\n    # Payment Method Information\n    card: Optional[Card] = None\n    virtual_account: Optional[VirtualAccount] = None\n    mobile_phone: Optional[Dict[str, Any]] = None\n    gift_certificate: Optional[Dict[str, Any]] = None\n    transfer: Optional[Dict[str, Any]] = None\n    receipt: Optional[Dict[str, Any]] = None\n    easy_pay: Optional[Dict[str, Any]] = None\n\n    # Additional Information\n    country: str = \"KR\"\n    failure: Optional[Dict[str, Any]] = None\n    cash_receipt: Optional[Dict[str, Any]] = None\n    discount: Optional[Dict[str, Any]] = None\n</code></pre>"},{"location":"api-reference/models/#fields","title":"Fields","text":"<p>Mandatory Fields:</p> Field Type Description <code>version</code> <code>str</code> TossPayments API version <code>payment_key</code> <code>str</code> Unique payment identifier <code>type</code> <code>PaymentType</code> Payment type (NORMAL, BILLING, BRANDPAY) <code>order_id</code> <code>str</code> Your system's order identifier <code>order_name</code> <code>str</code> Display name for the order <code>mid</code> <code>str</code> Merchant ID <code>currency</code> <code>str</code> Currency code (usually \"KRW\") <code>method</code> <code>str</code> Payment method used <code>total_amount</code> <code>int</code> Total payment amount <code>balance_amount</code> <code>int</code> Remaining balance (after cancellations) <code>status</code> <code>PaymentStatus</code> Current payment status <code>requested_at</code> <code>datetime</code> When payment was requested <p>Optional Fields:</p> Field Type Default Description <code>approved_at</code> <code>Optional[datetime]</code> <code>None</code> When payment was approved <code>use_escrow</code> <code>bool</code> <code>False</code> Whether escrow is used <code>last_transaction_key</code> <code>Optional[str]</code> <code>None</code> Latest transaction key <code>supplied_amount</code> <code>int</code> <code>0</code> Supplied amount <code>vat</code> <code>int</code> <code>0</code> VAT amount <code>cultural_expense</code> <code>bool</code> <code>False</code> Cultural expense benefit <code>tax_free_amount</code> <code>int</code> <code>0</code> Tax-free amount <code>tax_exemption_amount</code> <code>int</code> <code>0</code> Tax exemption amount <code>cancels</code> <code>List[Cancellation]</code> <code>[]</code> List of cancellations <code>is_partial_cancelable</code> <code>bool</code> <code>True</code> Whether partial cancellation is allowed <p>Payment Method Objects:</p> Field Type Description <code>card</code> <code>Optional[Card]</code> Card payment details <code>virtual_account</code> <code>Optional[VirtualAccount]</code> Virtual account details <code>mobile_phone</code> <code>Optional[Dict[str, Any]]</code> Mobile payment details <code>gift_certificate</code> <code>Optional[Dict[str, Any]]</code> Gift certificate details <code>transfer</code> <code>Optional[Dict[str, Any]]</code> Bank transfer details <code>receipt</code> <code>Optional[Dict[str, Any]]</code> Receipt information <code>easy_pay</code> <code>Optional[Dict[str, Any]]</code> Easy payment details"},{"location":"api-reference/models/#methods","title":"Methods","text":"<p>Status Check Methods:</p> <p><pre><code>def is_paid(self) -&gt; bool\n</code></pre> Returns <code>True</code> if payment status is <code>DONE</code>.</p> <p><pre><code>def is_canceled(self) -&gt; bool\n</code></pre> Returns <code>True</code> if payment status is <code>CANCELED</code> or <code>PARTIAL_CANCELED</code>.</p> <p>Amount Methods:</p> <p><pre><code>def get_cancelable_amount(self) -&gt; int\n</code></pre> Returns the amount that can still be canceled (<code>balance_amount</code>).</p> <p><pre><code>def get_canceled_amount(self) -&gt; int\n</code></pre> Returns the total amount that has been canceled (<code>total_amount - balance_amount</code>).</p> <p><pre><code>def can_be_canceled(self) -&gt; bool\n</code></pre> Returns <code>True</code> if the payment can be canceled (<code>balance_amount &gt; 0</code>).</p>"},{"location":"api-reference/models/#example","title":"Example","text":"<pre><code># Access payment information\nprint(f\"Order: {payment.order_id}\")\nprint(f\"Status: {payment.status.value}\")\nprint(f\"Total: {payment.total_amount:,} KRW\")\nprint(f\"Balance: {payment.balance_amount:,} KRW\")\n\n# Check payment status\nif payment.is_paid():\n    print(\"\u2705 Payment completed\")\nelif payment.is_canceled():\n    print(\"\u274c Payment canceled\")\n    print(f\"Canceled amount: {payment.get_canceled_amount():,} KRW\")\n\n# Check cancellation capability\nif payment.can_be_canceled():\n    print(f\"Can cancel up to: {payment.get_cancelable_amount():,} KRW\")\n\n# Access payment method details\nif payment.card:\n    print(f\"Card issuer: {payment.card.issuer_code}\")\nelif payment.virtual_account:\n    print(f\"Virtual account: {payment.virtual_account.account_number}\")\n</code></pre>"},{"location":"api-reference/models/#card","title":"<code>Card</code>","text":"<p>Card payment information.</p> <pre><code>@dataclass\nclass Card(BaseModel):\n    amount: int\n    issuer_code: str\n    acquirer_code: Optional[str] = None\n    number: Optional[str] = None\n    installment_plan_months: Optional[int] = None\n    approve_no: Optional[str] = None\n    use_card_point: Optional[bool] = None\n    card_type: Optional[str] = None\n    owner_type: Optional[str] = None\n</code></pre>"},{"location":"api-reference/models/#fields_1","title":"Fields","text":"Field Type Description <code>amount</code> <code>int</code> Amount paid with this card <code>issuer_code</code> <code>str</code> Card issuer code <code>acquirer_code</code> <code>Optional[str]</code> Card acquirer code <code>number</code> <code>Optional[str]</code> Masked card number <code>installment_plan_months</code> <code>Optional[int]</code> Installment plan months <code>approve_no</code> <code>Optional[str]</code> Card approval number <code>use_card_point</code> <code>Optional[bool]</code> Whether card points were used <code>card_type</code> <code>Optional[str]</code> Type of card <code>owner_type</code> <code>Optional[str]</code> Card owner type"},{"location":"api-reference/models/#example_1","title":"Example","text":"<pre><code>if payment.card:\n    card = payment.card\n    print(f\"Card amount: {card.amount:,} KRW\")\n    print(f\"Issuer: {card.issuer_code}\")\n    print(f\"Masked number: {card.number}\")\n\n    if card.installment_plan_months:\n        print(f\"Installments: {card.installment_plan_months} months\")\n</code></pre>"},{"location":"api-reference/models/#virtualaccount","title":"<code>VirtualAccount</code>","text":"<p>Virtual account payment information.</p> <pre><code>@dataclass\nclass VirtualAccount(BaseModel):\n    account_type: str\n    account_number: str\n    bank_code: str\n    customer_name: str\n    due_date: datetime\n    refund_status: str\n    expired: bool\n    settled_amount: int\n</code></pre>"},{"location":"api-reference/models/#fields_2","title":"Fields","text":"Field Type Description <code>account_type</code> <code>str</code> Type of virtual account <code>account_number</code> <code>str</code> Virtual account number <code>bank_code</code> <code>str</code> Bank code <code>customer_name</code> <code>str</code> Customer name for the account <code>due_date</code> <code>datetime</code> Payment due date <code>refund_status</code> <code>str</code> Refund status <code>expired</code> <code>bool</code> Whether the account has expired <code>settled_amount</code> <code>int</code> Amount that has been settled"},{"location":"api-reference/models/#example_2","title":"Example","text":"<pre><code>if payment.virtual_account:\n    va = payment.virtual_account\n    print(f\"Account: {va.account_number}\")\n    print(f\"Bank: {va.bank_code}\")\n    print(f\"Customer: {va.customer_name}\")\n    print(f\"Due date: {va.due_date}\")\n    print(f\"Settled: {va.settled_amount:,} KRW\")\n\n    if va.expired:\n        print(\"\u26a0\ufe0f Virtual account has expired\")\n</code></pre>"},{"location":"api-reference/models/#cancellation","title":"<code>Cancellation</code>","text":"<p>Information about a payment cancellation.</p> <pre><code>@dataclass\nclass Cancellation(BaseModel):\n    cancel_amount: int\n    cancel_reason: str\n    canceled_at: datetime\n    transaction_key: str\n    receipt_key: Optional[str] = None\n</code></pre>"},{"location":"api-reference/models/#fields_3","title":"Fields","text":"Field Type Description <code>cancel_amount</code> <code>int</code> Amount that was canceled <code>cancel_reason</code> <code>str</code> Reason for cancellation <code>canceled_at</code> <code>datetime</code> When cancellation occurred <code>transaction_key</code> <code>str</code> Cancellation transaction key <code>receipt_key</code> <code>Optional[str]</code> Receipt key for cancellation"},{"location":"api-reference/models/#example_3","title":"Example","text":"<pre><code>for cancellation in payment.cancels:\n    print(f\"Canceled: {cancellation.cancel_amount:,} KRW\")\n    print(f\"Reason: {cancellation.cancel_reason}\")\n    print(f\"Date: {cancellation.canceled_at}\")\n    print(f\"Transaction: {cancellation.transaction_key}\")\n</code></pre>"},{"location":"api-reference/models/#enumeration-types","title":"Enumeration Types","text":""},{"location":"api-reference/models/#paymentstatus","title":"<code>PaymentStatus</code>","text":"<p>Available payment statuses.</p> <pre><code>class PaymentStatus(Enum):\n    READY = \"READY\"                                # Payment ready\n    IN_PROGRESS = \"IN_PROGRESS\"                    # Payment in progress\n    WAITING_FOR_DEPOSIT = \"WAITING_FOR_DEPOSIT\"    # Waiting for deposit\n    DONE = \"DONE\"                                  # Payment completed\n    CANCELED = \"CANCELED\"                          # Payment canceled\n    PARTIAL_CANCELED = \"PARTIAL_CANCELED\"          # Partially canceled\n    ABORTED = \"ABORTED\"                            # Payment aborted\n    EXPIRED = \"EXPIRED\"                            # Payment expired\n</code></pre>"},{"location":"api-reference/models/#usage","title":"Usage","text":"<pre><code>from tosspayments_server_sdk.models.enums import PaymentStatus\n\n# Check specific status\nif payment.status == PaymentStatus.DONE:\n    print(\"Payment completed\")\n\n# Status-based logic\nmatch payment.status:\n    case PaymentStatus.DONE:\n        process_completed_payment(payment)\n    case PaymentStatus.CANCELED:\n        handle_canceled_payment(payment)\n    case PaymentStatus.WAITING_FOR_DEPOSIT:\n        wait_for_deposit(payment)\n    case _:\n        log_payment_status(payment.status.value)\n</code></pre>"},{"location":"api-reference/models/#paymentmethod","title":"<code>PaymentMethod</code>","text":"<p>Available payment methods.</p> <pre><code>class PaymentMethod(Enum):\n    CARD = \"\uce74\ub4dc\"                                    # Card\n    VIRTUAL_ACCOUNT = \"\uac00\uc0c1\uacc4\uc88c\"                       # Virtual account\n    SIMPLE_PAYMENT = \"\uac04\ud3b8\uacb0\uc81c\"                        # Simple payment\n    MOBILE_PHONE = \"\ud734\ub300\ud3f0\"                           # Mobile phone\n    ACCOUNT_TRANSFER = \"\uacc4\uc88c\uc774\uccb4\"                      # Account transfer\n    CULTURE_GIFT_CERTIFICATE = \"\ubb38\ud654\uc0c1\ud488\uad8c\"            # Culture gift certificate\n    BOOK_CULTURE_GIFT_CERTIFICATE = \"\ub3c4\uc11c\ubb38\ud654\uc0c1\ud488\uad8c\"    # Book culture gift certificate\n    GAME_CULTURE_GIFT_CERTIFICATE = \"\uac8c\uc784\ubb38\ud654\uc0c1\ud488\uad8c\"    # Game culture gift certificate\n</code></pre>"},{"location":"api-reference/models/#paymenttype","title":"<code>PaymentType</code>","text":"<p>Payment type enumeration.</p> <pre><code>class PaymentType(Enum):\n    NORMAL = \"NORMAL\"      # Normal payment\n    BILLING = \"BILLING\"    # Billing payment\n    BRANDPAY = \"BRANDPAY\"  # Brand pay\n</code></pre>"},{"location":"api-reference/models/#usage_1","title":"Usage","text":"<pre><code>from tosspayments_server_sdk.models.enums import PaymentType\n\n# Check payment type\nif payment.type == PaymentType.NORMAL:\n    print(\"Standard one-time payment\")\nelif payment.type == PaymentType.BILLING:\n    print(\"Recurring/subscription payment\")\n</code></pre>"},{"location":"api-reference/models/#related-documentation","title":"Related Documentation","text":"<ul> <li>Client - Main client class</li> <li>PaymentResource - Payment operations</li> <li>WebhookResource - Webhook handling</li> <li>Getting Started - Quickstart guide with error handling</li> </ul>"},{"location":"api-reference/payments/","title":"PaymentResource","text":"<p>The <code>PaymentResource</code> class provides methods for payment operations including confirmation, retrieval, and cancellation.</p>"},{"location":"api-reference/payments/#class-overview","title":"Class Overview","text":"<pre><code>class PaymentResource(BaseResource):\n    \"\"\"Payment API Resource for TossPayments integration\"\"\"\n</code></pre> <p>Access the PaymentResource through the client:</p> <pre><code>from tosspayments_server_sdk import Client\n\nclient = Client(secret_key=\"test_sk_...\")\npayments = client.payments  # PaymentResource instance\n</code></pre>"},{"location":"api-reference/payments/#methods","title":"Methods","text":""},{"location":"api-reference/payments/#retrieve","title":"<code>retrieve()</code>","text":"<p>Retrieve a payment using the payment key.</p> <pre><code>def retrieve(self, payment_key: str) -&gt; Payment\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>payment_key</code> <code>str</code> Yes TossPayments payment key <p>Returns: <code>Payment</code> object</p> <p>Example: <pre><code>try:\n    payment = client.payments.retrieve(\"mc_1234567890123456789012345678901234567890\")\n    print(f\"Payment Status: {payment.status.value}\")\n    print(f\"Amount: {payment.total_amount:,} KRW\")\nexcept PaymentNotFoundError:\n    print(\"Payment not found\")\nexcept APIError as e:\n    print(f\"API Error: {e.message}\")\n</code></pre></p>"},{"location":"api-reference/payments/#retrieve_by_order_id","title":"<code>retrieve_by_order_id()</code>","text":"<p>Retrieve a payment using the order ID.</p> <pre><code>def retrieve_by_order_id(self, order_id: str) -&gt; Payment\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>order_id</code> <code>str</code> Yes Your system's order ID <p>Returns: <code>Payment</code> object</p> <p>Example: <pre><code>try:\n    payment = client.payments.retrieve_by_order_id(\"order_20241201_001\")\n    print(f\"Order ID: {payment.order_id}\")\n    print(f\"Payment Key: {payment.payment_key}\")\n    print(f\"Status: {payment.status.value}\")\nexcept PaymentNotFoundError:\n    print(\"Order not found\")\n</code></pre></p>"},{"location":"api-reference/payments/#confirm","title":"<code>confirm()</code>","text":"<p>Confirm a payment that was initiated on the client side.</p> <pre><code>def confirm(self, payment_key: str, order_id: str, amount: int) -&gt; Payment\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>payment_key</code> <code>str</code> Yes Payment key from client-side payment widget <code>order_id</code> <code>str</code> Yes Your system's order identifier <code>amount</code> <code>int</code> Yes Payment amount in KRW (must be positive) <p>Returns: <code>Payment</code> object</p> <p>Example: <pre><code>try:\n    payment = client.payments.confirm(\n        payment_key=\"mc_1234567890123456789012345678901234567890\",\n        order_id=\"order_20241201_001\",\n        amount=15000\n    )\n\n    if payment.is_paid():\n        print(\"\u2705 Payment confirmed successfully\")\n        print(f\"Transaction ID: {payment.payment_key}\")\n        print(f\"Method: {payment.method}\")\n    else:\n        print(f\"Payment status: {payment.status.value}\")\n\nexcept ValidationError as e:\n    print(f\"Invalid parameters: {e}\")\nexcept APIError as e:\n    print(f\"Payment failed: {e.message}\")\n    print(f\"Error code: {e.error_code}\")\n</code></pre></p>"},{"location":"api-reference/payments/#cancel","title":"<code>cancel()</code>","text":"<p>Cancel a payment (full or partial cancellation).</p> <pre><code>def cancel(\n    self,\n    payment_key: str,\n    cancel_reason: str,\n    cancel_amount: Optional[int] = None,\n    refund_receive_account: Optional[Dict[str, str]] = None,\n    tax_free_amount: Optional[int] = None,\n) -&gt; Payment\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>payment_key</code> <code>str</code> Yes Payment key of the payment to cancel <code>cancel_reason</code> <code>str</code> Yes Reason for cancellation <code>cancel_amount</code> <code>int</code> No Amount to cancel (omit for full cancellation) <code>refund_receive_account</code> <code>Dict[str, str]</code> No Customer's refund account information <code>tax_free_amount</code> <code>int</code> No Tax-free amount in the cancellation <p>Returns: <code>Payment</code> object with updated cancellation information</p> <p>Example - Full Cancellation: <pre><code>try:\n    canceled_payment = client.payments.cancel(\n        payment_key=\"mc_1234567890123456789012345678901234567890\",\n        cancel_reason=\"Customer requested cancellation\"\n    )\n\n    print(f\"\u2705 Payment canceled\")\n    print(f\"Canceled amount: {canceled_payment.get_canceled_amount():,} KRW\")\n    print(f\"Status: {canceled_payment.status.value}\")\n\nexcept APIError as e:\n    print(f\"Cancellation failed: {e.message}\")\n</code></pre></p> <p>Example - Partial Cancellation: <pre><code>try:\n    partial_cancel = client.payments.cancel(\n        payment_key=\"mc_1234567890123456789012345678901234567890\",\n        cancel_reason=\"Partial refund for damaged item\",\n        cancel_amount=5000  # Cancel 5,000 KRW\n    )\n\n    print(f\"\u2705 Partial cancellation completed\")\n    print(f\"Canceled: {partial_cancel.get_canceled_amount():,} KRW\")\n    print(f\"Remaining: {partial_cancel.balance_amount:,} KRW\")\n\nexcept APIError as e:\n    print(f\"Partial cancellation failed: {e.message}\")\n</code></pre></p> <p>Example - Cancellation with Refund Account: <pre><code>refund_account = {\n    \"bank\": \"\uc2e0\ud55c\",\n    \"accountNumber\": \"12345678901\",\n    \"holderName\": \"\ud64d\uae38\ub3d9\"\n}\n\ntry:\n    canceled_payment = client.payments.cancel(\n        payment_key=\"mc_1234567890123456789012345678901234567890\",\n        cancel_reason=\"Refund to customer account\",\n        refund_receive_account=refund_account\n    )\n\n    print(\"\u2705 Payment canceled with refund account\")\n\nexcept APIError as e:\n    print(f\"Cancellation failed: {e.message}\")\n</code></pre></p>"},{"location":"api-reference/payments/#usage-patterns","title":"Usage Patterns","text":""},{"location":"api-reference/payments/#check-payment-status-before-operations","title":"Check Payment Status Before Operations","text":"<pre><code>def safe_payment_operation(client, payment_key):\n    # Always check current status first\n    payment = client.payments.retrieve(payment_key)\n\n    if payment.is_paid():\n        print(\"Payment is completed\")\n        return payment\n    elif payment.is_canceled():\n        print(\"Payment is already canceled\")\n        return payment\n    else:\n        print(f\"Payment status: {payment.status.value}\")\n        return payment\n</code></pre>"},{"location":"api-reference/payments/#batch-payment-processing","title":"Batch Payment Processing","text":"<pre><code>def process_payment_batch(client, payment_requests):\n    results = []\n\n    for req in payment_requests:\n        try:\n            payment = client.payments.confirm(\n                payment_key=req[\"payment_key\"],\n                order_id=req[\"order_id\"],\n                amount=req[\"amount\"]\n            )\n\n            results.append({\n                \"order_id\": req[\"order_id\"],\n                \"status\": \"success\",\n                \"payment\": payment\n            })\n\n        except APIError as e:\n            results.append({\n                \"order_id\": req[\"order_id\"],\n                \"status\": \"error\",\n                \"error\": e.message,\n                \"error_code\": e.error_code\n            })\n\n    return results\n</code></pre>"},{"location":"api-reference/payments/#conditional-cancellation","title":"Conditional Cancellation","text":"<pre><code>def conditional_cancel(client, payment_key, reason):\n    payment = client.payments.retrieve(payment_key)\n\n    if not payment.can_be_canceled():\n        print(\"Payment cannot be canceled\")\n        return None\n\n    if payment.get_cancelable_amount() &lt; 1000:\n        print(\"Cancelable amount too small\")\n        return None\n\n    return client.payments.cancel(payment_key, reason)\n</code></pre>"},{"location":"api-reference/payments/#api-endpoints","title":"API Endpoints","text":"<p>The PaymentResource methods correspond to these TossPayments API endpoints:</p> Method HTTP Method Endpoint <code>retrieve()</code> GET <code>/payments/{paymentKey}</code> <code>retrieve_by_order_id()</code> GET <code>/payments/orders/{orderId}</code> <code>confirm()</code> POST <code>/payments/confirm</code> <code>cancel()</code> POST <code>/payments/{paymentKey}/cancel</code>"},{"location":"api-reference/payments/#related-documentation","title":"Related Documentation","text":"<ul> <li>Payment Model - Payment data structure</li> <li>Payment Status - Available payment statuses</li> <li>Quickstart Guide - Error handling examples</li> <li>Webhook Integration - Real-time payment events</li> </ul>"},{"location":"api-reference/webhooks/","title":"WebhookResource","text":"<p>The <code>WebhookResource</code> class handles webhook event verification and parsing for real-time payment notifications from TossPayments.</p>"},{"location":"api-reference/webhooks/#class-overview","title":"Class Overview","text":"<pre><code>class WebhookResource:\n    \"\"\"Webhook verification and parsing for TossPayments events\"\"\"\n</code></pre> <p>Access the WebhookResource through the client:</p> <pre><code>from tosspayments_server_sdk import Client\n\nclient = Client(secret_key=\"test_sk_...\")\nwebhooks = client.webhooks  # WebhookResource instance\n</code></pre>"},{"location":"api-reference/webhooks/#methods","title":"Methods","text":""},{"location":"api-reference/webhooks/#verify_and_parse","title":"<code>verify_and_parse()</code>","text":"<p>Verify and parse webhook payload from TossPayments.</p> <pre><code>def verify_and_parse(self, payload: Union[str, bytes]) -&gt; WebhookEvent\n</code></pre> <p>Parameters:</p> Parameter Type Required Description <code>payload</code> <code>Union[str, bytes]</code> Yes Raw webhook payload from TossPayments <p>Returns: <code>WebhookEvent</code> - Parsed webhook event object</p> <p>Example: <pre><code>from tosspayments_server_sdk import WebhookVerificationError\n\n@app.route('/webhook', methods=['POST'])\ndef handle_webhook():\n    try:\n        # Parse webhook data\n        webhook_event = client.webhooks.verify_and_parse(request.data)\n\n        # Handle different event types\n        if webhook_event.is_payment_event:\n            handle_payment_event(webhook_event)\n        elif webhook_event.is_cancel_event:\n            handle_cancel_event(webhook_event)\n        elif webhook_event.is_virtual_account_event:\n            handle_virtual_account_event(webhook_event)\n\n        return \"OK\", 200\n\n    except WebhookVerificationError as e:\n        print(f\"Webhook verification failed: {e}\")\n        return \"Bad Request\", 400\n</code></pre></p>"},{"location":"api-reference/webhooks/#webhook-events","title":"Webhook Events","text":""},{"location":"api-reference/webhooks/#webhookevent-type-union","title":"<code>WebhookEvent</code> Type Union","text":"<pre><code>WebhookEvent = Union[\n    PaymentStatusChangedEvent,\n    DepositCallbackEvent,\n    CancelStatusChangedEvent,\n]\n</code></pre> <p>All webhook events inherit from <code>BaseWebhookEvent</code> and provide common properties.</p>"},{"location":"api-reference/webhooks/#basewebhookevent","title":"<code>BaseWebhookEvent</code>","text":"<p>Base class for all webhook events.</p> <pre><code>@dataclass\nclass BaseWebhookEvent(BaseModel, ABC):\n    created_at: datetime\n    event_type: str\n</code></pre>"},{"location":"api-reference/webhooks/#properties","title":"Properties","text":"<p><pre><code>@property\ndef is_payment_event(self) -&gt; bool\n</code></pre> Returns <code>True</code> if this is a payment status change event.</p> <p><pre><code>@property\ndef is_cancel_event(self) -&gt; bool\n</code></pre> Returns <code>True</code> if this is a cancellation event.</p> <p><pre><code>@property\ndef is_virtual_account_event(self) -&gt; bool\n</code></pre> Returns <code>True</code> if this is a virtual account deposit event.</p>"},{"location":"api-reference/webhooks/#paymentstatuschangedevent","title":"<code>PaymentStatusChangedEvent</code>","text":"<p>Triggered when a payment status changes.</p> <pre><code>@dataclass\nclass PaymentStatusChangedEvent(BaseWebhookEvent):\n    payment: Payment\n</code></pre>"},{"location":"api-reference/webhooks/#additional-properties","title":"Additional Properties","text":"<p><pre><code>@property\ndef payment_key(self) -&gt; str\n</code></pre> Returns the payment key from the embedded payment object.</p> <p><pre><code>@property\ndef order_id(self) -&gt; str\n</code></pre> Returns the order ID from the embedded payment object.</p> <p><pre><code>@property\ndef status(self) -&gt; PaymentStatus\n</code></pre> Returns the current payment status.</p>"},{"location":"api-reference/webhooks/#methods_1","title":"Methods","text":"<p><pre><code>def is_payment_completed(self) -&gt; bool\n</code></pre> Returns <code>True</code> if the payment status is <code>DONE</code>.</p> <p><pre><code>def is_payment_canceled(self) -&gt; bool\n</code></pre> Returns <code>True</code> if the payment status is <code>CANCELED</code> or <code>PARTIAL_CANCELED</code>.</p>"},{"location":"api-reference/webhooks/#example","title":"Example","text":"<pre><code>def handle_payment_event(event: PaymentStatusChangedEvent):\n    payment = event.payment\n\n    print(f\"Payment status changed: {event.payment_key}\")\n    print(f\"Order: {event.order_id}\")\n    print(f\"New status: {event.status.value}\")\n    print(f\"Amount: {payment.total_amount:,} KRW\")\n\n    if event.is_payment_completed():\n        print(\"\u2705 Payment completed - process order\")\n        # Update order status, send confirmation email, etc.\n        process_successful_payment(payment)\n\n    elif event.is_payment_canceled():\n        print(\"\u274c Payment canceled - handle cancellation\")\n        # Update order status, process refund, etc.\n        handle_payment_cancellation(payment)\n\n    else:\n        print(f\"\u23f3 Payment status: {event.status.value}\")\n        # Handle other statuses (waiting, in progress, etc.)\n        log_payment_status_change(payment)\n</code></pre>"},{"location":"api-reference/webhooks/#cancelstatuschangedevent","title":"<code>CancelStatusChangedEvent</code>","text":"<p>Triggered when a payment cancellation occurs.</p> <pre><code>@dataclass\nclass CancelStatusChangedEvent(BaseWebhookEvent):\n    cancellation: Cancellation\n</code></pre>"},{"location":"api-reference/webhooks/#properties_1","title":"Properties","text":"<p><pre><code>@property\ndef cancel_amount(self) -&gt; int\n</code></pre> Returns the amount that was canceled.</p> <p><pre><code>@property\ndef cancel_reason(self) -&gt; str\n</code></pre> Returns the reason for cancellation.</p> <p><pre><code>@property\ndef transaction_key(self) -&gt; str\n</code></pre> Returns the cancellation transaction key.</p>"},{"location":"api-reference/webhooks/#example_1","title":"Example","text":"<pre><code>def handle_cancel_event(event: CancelStatusChangedEvent):\n    cancellation = event.cancellation\n\n    print(f\"Cancellation occurred: {event.transaction_key}\")\n    print(f\"Amount canceled: {event.cancel_amount:,} KRW\")\n    print(f\"Reason: {event.cancel_reason}\")\n    print(f\"Date: {cancellation.canceled_at}\")\n\n    # Process cancellation\n    process_payment_cancellation(\n        transaction_key=event.transaction_key,\n        amount=event.cancel_amount,\n        reason=event.cancel_reason\n    )\n</code></pre>"},{"location":"api-reference/webhooks/#depositcallbackevent","title":"<code>DepositCallbackEvent</code>","text":"<p>Triggered when a virtual account deposit is completed.</p> <pre><code>@dataclass\nclass DepositCallbackEvent(BaseWebhookEvent):\n    secret: str\n    status: PaymentStatus\n    transaction_key: str\n    order_id: str\n</code></pre>"},{"location":"api-reference/webhooks/#methods_2","title":"Methods","text":"<p><pre><code>def is_deposit_completed(self) -&gt; bool\n</code></pre> Returns <code>True</code> if the deposit status indicates completion.</p>"},{"location":"api-reference/webhooks/#example_2","title":"Example","text":"<pre><code>def handle_virtual_account_event(event: DepositCallbackEvent):\n    print(f\"Virtual account deposit: {event.transaction_key}\")\n    print(f\"Order: {event.order_id}\")\n    print(f\"Status: {event.status.value}\")\n\n    if event.is_deposit_completed():\n        print(\"\u2705 Virtual account deposit completed\")\n        # Process the deposit\n        process_virtual_account_deposit(\n            order_id=event.order_id,\n            transaction_key=event.transaction_key\n        )\n    else:\n        print(f\"\u23f3 Deposit status: {event.status.value}\")\n</code></pre>"},{"location":"api-reference/webhooks/#related-documentation","title":"Related Documentation","text":"<ul> <li>Models - Webhook event data structures</li> <li>Quickstart Guide - Basic error handling</li> <li>Configuration - Security best practices</li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration","text":""},{"location":"getting-started/configuration/#api-credentials","title":"API Credentials","text":"<p>To use the TossPayments Python Server SDK, you need to obtain API credentials from the TossPayments Developer Console.</p>"},{"location":"getting-started/configuration/#getting-your-api-keys","title":"Getting Your API Keys","text":"<ol> <li>Register at TossPayments: Visit TossPayments Developer Console</li> <li>Create an Application: Set up your application to get API keys</li> <li>Obtain Secret Keys:</li> <li>Test Key: <code>test_sk_...</code> for development and testing</li> <li>Live Key: <code>live_sk_...</code> for production use</li> </ol> <p>Security Notice</p> <p>Never expose your secret keys in client-side code, public repositories, or logs. Always use server-side environment variables.</p>"},{"location":"getting-started/configuration/#client-configuration","title":"Client Configuration","text":""},{"location":"getting-started/configuration/#basic-configuration","title":"Basic Configuration","text":"<pre><code>from tosspayments_server_sdk import Client\n\n# Test environment\nclient = Client(secret_key=\"test_sk_your_test_key_here\")\n\n# Live environment\nclient = Client(secret_key=\"live_sk_your_live_key_here\")\n</code></pre>"},{"location":"getting-started/configuration/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>from tosspayments_server_sdk import Client\n\nclient = Client(\n    secret_key=\"test_sk_your_key_here\",\n    api_version=\"v1\",           # API version (default: \"v1\")\n    timeout=30,                 # Request timeout in seconds (default: 30)\n    max_retries=3              # Maximum retry attempts (default: 3)\n)\n</code></pre>"},{"location":"getting-started/configuration/#configuration-options","title":"Configuration Options","text":"Parameter Type Default Description <code>secret_key</code> <code>str</code> Required TossPayments secret key <code>api_version</code> <code>str</code> <code>\"v1\"</code> TossPayments API version <code>timeout</code> <code>int</code> <code>30</code> HTTP request timeout in seconds <code>max_retries</code> <code>int</code> <code>3</code> Maximum number of retry attempts"},{"location":"getting-started/configuration/#environment-detection","title":"Environment Detection","text":"<p>The SDK automatically detects your environment based on your secret key:</p> <pre><code>client = Client(secret_key=\"test_sk_...\")\n\n# Environment detection\nprint(f\"Test mode: {client.is_test_mode}\")      # True\nprint(f\"Live mode: {client.is_live_mode}\")      # False\n\n# Configuration details\nprint(f\"API URL: {client.config.api_url}\")\nprint(f\"Timeout: {client.config.timeout}\")\nprint(f\"Max retries: {client.config.max_retries}\")\n</code></pre>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>For better security, store your API keys in environment variables:</p>"},{"location":"getting-started/configuration/#setting-environment-variables","title":"Setting Environment Variables","text":"<pre><code># .env file\nTOSS_SECRET_KEY=test_sk_your_key_here\n</code></pre>"},{"location":"getting-started/configuration/#using-environment-variables","title":"Using Environment Variables","text":"<pre><code>import os\nfrom tosspayments_server_sdk import Client\n\n# Load from environment variable\nsecret_key = os.getenv(\"TOSS_SECRET_KEY\")\nif not secret_key:\n    raise ValueError(\"TOSS_SECRET_KEY environment variable is required\")\n\nclient = Client(secret_key=secret_key)\n</code></pre>"},{"location":"getting-started/configuration/#using-python-dotenv","title":"Using python-dotenv","text":"<pre><code># First install: pip install python-dotenv\nfrom dotenv import load_dotenv\nimport os\nfrom tosspayments_server_sdk import Client\n\n# Load environment variables from .env file\nload_dotenv()\n\nclient = Client(secret_key=os.getenv(\"TOSS_SECRET_KEY\"))\n</code></pre>"},{"location":"getting-started/configuration/#configuration-validation","title":"Configuration Validation","text":"<p>The SDK automatically validates your configuration:</p> <pre><code>from tosspayments_server_sdk import Client\nfrom tosspayments_server_sdk.exceptions import ValidationError\n\ntry:\n    client = Client(secret_key=\"invalid_key\")\nexcept ValidationError as e:\n    print(f\"Configuration error: {e}\")\n</code></pre>"},{"location":"getting-started/configuration/#validation-rules","title":"Validation Rules","text":"<ul> <li>Secret Key Format: Must start with <code>test_sk_</code> or <code>live_sk_</code></li> <li>Timeout: Must be a positive integer</li> <li>Max Retries: Must be a non-negative integer</li> <li>API Version: Must be a valid string</li> </ul>"},{"location":"getting-started/configuration/#http-client-configuration","title":"HTTP Client Configuration","text":"<p>The SDK uses an HTTP client with the following default settings:</p> <pre><code># Default HTTP client settings\n{\n    \"timeout\": 30,              # Request timeout\n    \"max_retries\": 3,           # Retry attempts\n    \"backoff_factor\": 0.5,      # Exponential backoff factor\n    \"status_forcelist\": [500, 502, 503, 504]  # HTTP statuses to retry\n}\n</code></pre>"},{"location":"getting-started/configuration/#custom-http-configuration","title":"Custom HTTP Configuration","text":"<pre><code>from tosspayments_server_sdk import Client\n\n# Custom timeout and retry settings\nclient = Client(\n    secret_key=\"test_sk_your_key_here\",\n    timeout=60,        # 60 seconds timeout\n    max_retries=5      # 5 retry attempts\n)\n</code></pre>"},{"location":"getting-started/configuration/#testing-configuration","title":"Testing Configuration","text":"<p>For testing your configuration:</p> <pre><code>from tosspayments_server_sdk import Client\n\ndef test_configuration():\n    client = Client(secret_key=\"test_sk_your_key_here\")\n\n    # Test environment detection\n    assert client.is_test_mode == True\n    assert client.is_live_mode == False\n\n    # Test API URL construction\n    expected_url = \"https://api.tosspayments.com/v1\"\n    assert client.config.api_url == expected_url\n\n    print(\"\u2705 Configuration test passed!\")\n\nif __name__ == \"__main__\":\n    test_configuration()\n</code></pre>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<p>With your configuration set up, you're ready to:</p> <ol> <li>Quickstart Guide - Make your first API call</li> <li>Payment Processing - Learn about payment operations</li> <li>API Reference - Complete client documentation</li> </ol>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python: 3.9 or higher</li> <li>Dependencies: requests&gt;=2.28.0</li> </ul>"},{"location":"getting-started/installation/#install-from-pypi","title":"Install from PyPI","text":"<p>The easiest way to install the TossPayments Python Server SDK is via pip:</p> <pre><code>pip install tosspayments-python-server-sdk\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>After installation, verify that the SDK is working correctly:</p> <pre><code>import tosspayments_server_sdk\n\nprint(f\"SDK Version: {tosspayments_server_sdk.__version__}\")\n\n# Test client initialization (with dummy key)\ntry:\n    client = tosspayments_server_sdk.Client(secret_key=\"test_sk_dummy\")\n    print(\"\u2705 SDK installed successfully!\")\n    print(f\"Test mode: {client.is_test_mode}\")\nexcept Exception as e:\n    print(f\"\u274c Installation issue: {e}\")\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once installed, proceed to:</p> <ol> <li>Configuration - Set up your API credentials</li> <li>Quickstart - Your first payment integration</li> <li>API Reference - Detailed API documentation</li> </ol>"},{"location":"getting-started/quickstart/","title":"Quickstart Guide","text":"<p>This guide will help you make your first payment integration with TossPayments in under 5 minutes.</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>TossPayments API credentials (test keys)</li> <li>Basic understanding of payment flows</li> </ul>"},{"location":"getting-started/quickstart/#step-1-install-the-sdk","title":"Step 1: Install the SDK","text":"<pre><code>pip install tosspayments-python-server-sdk\n</code></pre>"},{"location":"getting-started/quickstart/#step-2-initialize-the-client","title":"Step 2: Initialize the Client","text":"<pre><code>from tosspayments_server_sdk import Client\n\n# Initialize with your test secret key\nclient = Client(secret_key=\"test_sk_your_test_key_here\")\n\n# Verify environment\nprint(f\"Test mode: {client.is_test_mode}\")  # Should be True\n</code></pre>"},{"location":"getting-started/quickstart/#step-3-payment-flow-overview","title":"Step 3: Payment Flow Overview","text":"<p>TossPayments follows this payment flow:</p> <ol> <li>Frontend: Customer initiates payment using TossPayments Payment Widget</li> <li>Frontend: Payment widget returns <code>paymentKey</code>, <code>orderId</code>, and <code>amount</code></li> <li>Backend: Your server confirms the payment using this SDK</li> <li>Backend: Handle the payment result</li> </ol>"},{"location":"getting-started/quickstart/#step-4-confirm-a-payment","title":"Step 4: Confirm a Payment","text":"<p>After receiving payment details from your frontend:</p> <pre><code>from tosspayments_server_sdk import Client, APIError\n\nclient = Client(secret_key=\"test_sk_your_test_key_here\")\n\ntry:\n    # Confirm payment with details from frontend\n    payment = client.payments.confirm(\n        payment_key=\"mc_1234567890123456789012345678901234567890\",  # From frontend\n        order_id=\"order_20241201_001\",                              # Your order ID\n        amount=15000                                                # Amount in KRW\n    )\n\n    # Payment successful\n    print(f\"\u2705 Payment confirmed!\")\n    print(f\"Order ID: {payment.order_id}\")\n    print(f\"Payment Status: {payment.status.value}\")\n    print(f\"Total Amount: {payment.total_amount:,} KRW\")\n    print(f\"Payment Method: {payment.method}\")\n\n    # Check payment status\n    if payment.is_paid():\n        print(\"\ud83d\udcb3 Payment completed successfully\")\n        # Process order fulfillment here\n\nexcept APIError as e:\n    print(f\"\u274c Payment failed: {e.message}\")\n    print(f\"Error code: {e.error_code}\")\n    # Handle payment failure\n</code></pre>"},{"location":"getting-started/quickstart/#step-5-retrieve-payment-information","title":"Step 5: Retrieve Payment Information","text":"<p>You can retrieve payment details anytime:</p> <pre><code># Retrieve by payment key\npayment = client.payments.retrieve(\"mc_1234567890123456789012345678901234567890\")\n\n# Or retrieve by order ID\npayment = client.payments.retrieve_by_order_id(\"order_20241201_001\")\n\nprint(f\"Payment Status: {payment.status.value}\")\nprint(f\"Total Amount: {payment.total_amount:,} KRW\")\nprint(f\"Balance Amount: {payment.balance_amount:,} KRW\")\n</code></pre>"},{"location":"getting-started/quickstart/#step-6-cancel-a-payment-optional","title":"Step 6: Cancel a Payment (Optional)","text":"<p>If you need to cancel a payment:</p> <pre><code>try:\n    # Full cancellation\n    canceled_payment = client.payments.cancel(\n        payment_key=\"mc_1234567890123456789012345678901234567890\",\n        cancel_reason=\"Customer requested cancellation\"\n    )\n\n    print(f\"\u2705 Payment canceled\")\n    print(f\"Canceled amount: {canceled_payment.get_canceled_amount():,} KRW\")\n\nexcept APIError as e:\n    print(f\"\u274c Cancellation failed: {e.message}\")\n</code></pre>"},{"location":"getting-started/quickstart/#partial-cancellation","title":"Partial Cancellation","text":"<pre><code># Cancel only part of the payment\npartial_cancel = client.payments.cancel(\n    payment_key=\"mc_1234567890123456789012345678901234567890\",\n    cancel_reason=\"Partial refund requested\",\n    cancel_amount=5000  # Cancel 5,000 KRW out of total\n)\n\nprint(f\"Partially canceled: {partial_cancel.get_canceled_amount():,} KRW\")\nprint(f\"Remaining balance: {partial_cancel.balance_amount:,} KRW\")\n</code></pre>"},{"location":"getting-started/quickstart/#complete-example","title":"Complete Example","text":"<p>Here's a complete example integrating all steps:</p> <pre><code>from tosspayments_server_sdk import Client, APIError\nimport os\n\ndef process_payment():\n    # Initialize client\n    client = Client(secret_key=os.getenv(\"TOSS_SECRET_KEY\"))\n\n    # Example payment data (normally from your frontend)\n    payment_data = {\n        \"payment_key\": \"mc_1234567890123456789012345678901234567890\",\n        \"order_id\": \"order_20241201_001\",\n        \"amount\": 15000\n    }\n\n    try:\n        # Step 1: Confirm payment\n        payment = client.payments.confirm(**payment_data)\n\n        if payment.is_paid():\n            print(f\"\u2705 Payment successful: {payment.order_id}\")\n\n            # Step 2: Process your business logic\n            # - Update order status\n            # - Send confirmation email\n            # - Update inventory\n\n            return {\n                \"status\": \"success\",\n                \"payment_id\": payment.payment_key,\n                \"order_id\": payment.order_id,\n                \"amount\": payment.total_amount\n            }\n        else:\n            print(f\"\u23f3 Payment pending: {payment.status.value}\")\n            return {\"status\": \"pending\", \"payment\": payment}\n\n    except APIError as e:\n        print(f\"\u274c Payment error: {e.message}\")\n        return {\n            \"status\": \"error\",\n            \"error_code\": e.error_code,\n            \"message\": e.message\n        }\n\nif __name__ == \"__main__\":\n    result = process_payment()\n    print(f\"Result: {result}\")\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you've completed the quickstart:</p> <ol> <li>Webhook Integration - Handle real-time payment events</li> <li>API Reference - Explore all available methods</li> <li>Payment Models - Understanding payment data structures</li> <li>Configuration Guide - Advanced configuration options</li> </ol>"}]}